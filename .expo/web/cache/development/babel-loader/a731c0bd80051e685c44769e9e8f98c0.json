{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/gabriel/Documentos/nextLevelWeekTogether/game-play/src/hooks/auth.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport * as AuthSession from 'expo-auth-session';\nimport { REDIRECT_URI, SCOPE, RESPONSE_TYPE, CLIENT_ID } from \"../configs\";\nimport { api } from \"../services/api\";\nexport var AuthContext = createContext({});\n\nfunction AuthProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  function signIn() {\n    var authUrl, response;\n    return _regeneratorRuntime.async(function signIn$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setLoading(true);\n            authUrl = api.defaults.baseURL + \"/oauth2/authorize?client_id=\" + CLIENT_ID + \"&redirect_uri=\\n                \" + REDIRECT_URI + \"&response_type=\" + RESPONSE_TYPE + \"&scope=\" + SCOPE;\n            response = AuthSession.startAsync({\n              authUrl: authUrl\n            });\n            console.log(response);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            throw new Error('Não foi possível autenticar');\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  }\n\n  return React.createElement(AuthContext.Provider, {\n    value: {\n      user: user,\n      signIn: signIn\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, children);\n}\n\nfunction useAuth() {\n  var context = useContext(AuthContext);\n  return context;\n}\n\nexport { AuthProvider, useAuth };","map":{"version":3,"sources":["/home/gabriel/Documentos/nextLevelWeekTogether/game-play/src/hooks/auth.tsx"],"names":["React","createContext","useContext","useState","AuthSession","REDIRECT_URI","SCOPE","RESPONSE_TYPE","CLIENT_ID","api","AuthContext","AuthProvider","children","user","setUser","loading","setLoading","signIn","authUrl","defaults","baseURL","response","startAsync","console","log","Error","useAuth","context"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAAyCC,UAAzC,EAAqDC,QAArD,QAAoE,OAApE;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,SACIC,YADJ,EAEIC,KAFJ,EAGIC,aAHJ,EAIIC,SAJJ;AAOA,SAAQC,GAAR;AAoBA,OAAO,IAAMC,WAAW,GAAGT,aAAa,CAAC,EAAD,CAAjC;;AAEP,SAASU,YAAT,OAAqD;AAAA,MAA9BC,QAA8B,QAA9BA,QAA8B;;AACjD,kBAAwBT,QAAQ,CAAO,EAAP,CAAhC;AAAA;AAAA,MAAOU,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA8BX,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOY,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,WAAeC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQD,YAAAA,UAAU,CAAC,IAAD,CAAV;AACME,YAAAA,OAHd,GAG2BT,GAAG,CAACU,QAAJ,CAAaC,OAHxC,oCAG8EZ,SAH9E,wCAIcH,YAJd,uBAI4CE,aAJ5C,eAImED,KAJnE;AAMce,YAAAA,QANd,GAMyBjB,WAAW,CAACkB,UAAZ,CAAuB;AAACJ,cAAAA,OAAO,EAAPA;AAAD,aAAvB,CANzB;AAOQK,YAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AAPR;AAAA;;AAAA;AAAA;AAAA;AAAA,kBAUc,IAAII,KAAJ,CAAU,6BAAV,CAVd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AACzBZ,MAAAA,IAAI,EAAJA,IADyB;AAEzBI,MAAAA,MAAM,EAANA;AAFyB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIKL,QAJL,CADJ;AAQH;;AAED,SAASc,OAAT,GAAmB;AACf,MAAMC,OAAO,GAAGzB,UAAU,CAACQ,WAAD,CAA1B;AAEA,SAAOiB,OAAP;AACH;;AAED,SAAQhB,YAAR,EAAsBe,OAAtB","sourcesContent":["import React, {createContext, ReactNode, useContext, useState} from \"react\";\nimport * as AuthSession from 'expo-auth-session';\nimport {\n    REDIRECT_URI,\n    SCOPE,\n    RESPONSE_TYPE,\n    CLIENT_ID,\n    CDN_IMAGE\n} from '../configs';\nimport {api} from \"../services/api\";\n\ntype User = {\n    id: string,\n    username: string,\n    firstName: string,\n    avatar: string,\n    email: string,\n    token: string\n}\n\ntype AuthContexData = {\n    user: User,\n    signIn: () => Promise<void>\n}\n\ntype AuthProviderProps = {\n    children: ReactNode,\n}\n\nexport const AuthContext = createContext({} as AuthContexData);\n\nfunction AuthProvider({children}: AuthProviderProps) {\n    const [user, setUser] = useState<User>({} as User);\n    const [loading, setLoading] = useState(false);\n\n    async function signIn() {\n        try {\n            setLoading(true);\n            const authUrl = `${api.defaults.baseURL}/oauth2/authorize?client_id=${CLIENT_ID}&redirect_uri=\n                ${REDIRECT_URI}&response_type=${RESPONSE_TYPE}&scope=${SCOPE}`;\n\n           const  response = AuthSession.startAsync({authUrl});\n            console.log(response);\n\n        } catch {\n            throw new Error('Não foi possível autenticar');\n        }\n    }\n\n    return (\n        <AuthContext.Provider value={{\n            user,\n            signIn\n        }}>\n            {children}\n        </AuthContext.Provider>\n    )\n}\n\nfunction useAuth() {\n    const context = useContext(AuthContext);\n\n    return context;\n}\n\nexport {AuthProvider, useAuth}\n"]},"metadata":{},"sourceType":"module"}